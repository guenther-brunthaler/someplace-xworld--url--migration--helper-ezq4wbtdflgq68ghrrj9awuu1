#! /bin/sh
# Version 2022.140.5
# Copyright (c) 2022 Guenther Brunthaler. All rights reserved.
#
# This script is free software.
# Distribution is permitted under the terms of the GPLv3.

strip_prefix='tilde_anyone-someplace-'
replace_with='someplace-'
rc_nothing_done=99

set -e
trap 'test $? = 0 || echo "\"$0\" failed!" >& 2' 0 INT TERM QUIT HUP
mandatory_prefix='tag:xworld.mine.nu,2009:'

dry_run=false
search_only=false
while getopts ns opt
do
	case $opt in
		s) search_only=true;;
		n) dry_run=true;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

println() {
	printf '%s\n' "$*"
}

qbre() {
	println "$1" | sed 's/[[.\\*]/\\&/g'
}

qin() {
	println "$1" | sed '
		/^[-+=_.,\/%[:alnum:]]*$/ b
		s/["`$]/\\&/g
		s/.*/"&"/
	'
}

qcmd() {
	cmdline=
	for arg
	do
		cmdline=$cmdline${cmdline:+ }"`qin "$arg"`"
	done
	println "$cmdline"
}

migrate_branch() {
	rc=$rc_nothing_done
	while IFS=' ' read -r key value
	do
		oldurl=$value
		case $value in
			"$mandatory_prefix"*) ;;
			*) continue
		esac
		value=${value#"$mandatory_prefix"}
		case $value in
			"$strip_prefix"*) ;;
			*) continue
		esac
		newurl=$mandatory_prefix$replace_with
		newurl=$newurl${value#"$strip_prefix"}
		set git config --local "$key" "$newurl"
		if $dry_run
		then
			echo "[SIMULATION] For old URL `qin "$oldurl"`"
			echo "[SIMULATION] Execute: `qcmd "$@"`"
			echo
		else
			echo "Substituting URL `qin "$newurl"` for `
				qin "$oldurl"`."
			echo
			"$@"
		fi
		rc=0
	done
	return $rc
}

migrate_any() {
	test -d "$1"
	case $1 in
		*.git) test -f "$1/config";;
		*) test -f "$1/.git/config"
	esac
	(
		cd -- "$1"
		git config --local --get-regexp '^remote\.[^.]+\.url$' \
		| migrate_branch
	)
}

migrate_repos() {
	migrate_any "$1" && rc=$? || rc=$?
	case $rc in
		$rc_nothing_done) ;;
		0) none=false;;
		*) exit $rc
	esac
}

migrate() {
	if $search_only
	then
		case $1 in
			-*) tree_root=./$1;;
			*) tree_root=$1;;
		esac
		test -d "$tree_root"
		find -H "$tree_root" \
			-name "*.git" -prune -user `id -u` -perm -700 -print \
		| sed 's|/\.git$||'
	else
		migrate_repos "$1"
	fi
}

test $# = 0 && set .
none=true
if test $# = 1 && test "$1" = -
then
	while IFS= read -r repopath
	do
		migrate "$repopath"
	done
else
	for repopath
	do
		migrate "$repopath"
	done
fi \
| if $search_only
then
	LC_COLLATE=C sort -u
else
	cat
fi
if $none
then
	echo "(Nothing to be done.)" >& 2
fi
